Padrões de Design

Template Method - present in:
        Interface EasyScoreCalculator from which the method calculateScore will be implemented by the user.
        
        public interface EasyScoreCalculator<Solution_> {

            /**
             * This method is only called if the {@link Score} cannot be predicted.
             * The {@link Score} can be predicted for example after an undo {@link Move}.
             * @param solution never null
             * @param initScore {@code <= 0}, managed by OptaPlanner, needed as a parameter in the {@link Score}'s creation
             * method, see {@link Score#getInitScore()}
             * @return never null
             */
            Score calculateScore(Solution_ solution, int initScore);

        }

Factory - present in:
        Class ValueRangeFactory

         /**
             * Build a {@link CountableValueRange} of both {@code boolean} values.
             * @return never null
             */
            public static CountableValueRange<Boolean> createBooleanValueRange() {
                return new BooleanValueRange();
            }

            /**
             * Build a {@link CountableValueRange} of all {@code int} values between 2 bounds.
             * @param from inclusive minimum
             * @param to exclusive maximum, {@code >= from}
             * @return never null
             */
            public static CountableValueRange<Integer> createIntValueRange(int from, int to) {
                return new IntValueRange(from, to);
            }
        …etc

Abstract Factory - present in:

        public abstract class SolverFactory<Solution_> {

            // ************************************************************************
            // Static creation methods: XML
            // ************************************************************************

            /**
             * Uses {@link KieServices#getKieClasspathContainer()}.
             * @param solverConfigResource never null, a classpath resource in the {@link KieContainer}
             * as defined by {@link ClassLoader#getResource(String)}
             * @return never null
             */
            public static <Solution_> SolverFactory<Solution_> createFromKieContainerXmlResource(
                    String solverConfigResource) {
                KieContainer kieContainer = KieServices.Factory.get().getKieClasspathContainer();
                return new XStreamXmlSolverFactory<Solution_>(new SolverConfigContext(kieContainer))
                        .configure(solverConfigResource);
           }

Singleton: not used!

Iterator - present in:

        public abstract class ValueRangeIterator<S> implements Iterator<S> {

            @Override
            public void remove() {
                throw new UnsupportedOperationException("The optional operation remove() is not supported.");
            }

        }

Memento??:

public interface Move {

    /**
     * Called before a move is evaluated to decide whether the move can be done and evaluated.
     * A Move is not doable if:
     * <ul>
     * <li>Either doing it would change nothing in the {@link PlanningSolution}.</li>
     * <li>Either it's simply not possible to do (for example due to build-in hard constraints).</li>
     * </ul>
     * <p>
     * It is recommended to keep this method implementation simple: do not use it in an attempt to satisfy normal
     * hard and soft constraints.
     * <p>
     * Although you could also filter out non-doable moves in for example the {@link MoveSelector}
     * or {@link MoveListFactory}, this is not needed as the {@link Solver} will do it for you.
     * @param scoreDirector the {@link ScoreDirector} not yet modified by the move.
     * @return true if the move achieves a change in the solution and the move is possible to do on the solution.
     */
    boolean isMoveDoable(ScoreDirector scoreDirector);

    /**
     * Called before the move is done, so the move can be evaluated and then be undone
     * without resulting into a permanent change in the solution.
     * @param scoreDirector the {@link ScoreDirector} not yet modified by the move.
     * @return an undoMove which does the exact opposite of this move.
     */
    Move createUndoMove(ScoreDirector scoreDirector);

    /**
     * Does the move (which indirectly affects the {@link ScoreDirector#getWorkingSolution()}).
     * When the {@link PlanningSolution working solution} is modified, the {@link ScoreDirector} must be correctly notified
     * (through {@link ScoreDirector#beforeVariableChanged(Object, String)} and
     * {@link ScoreDirector#afterVariableChanged(Object, String)}),
     * otherwise later calculated {@link Score}s will be corrupted.
     * <p>
     * This method must end with calling {@link ScoreDirector#triggerVariableListeners()} to ensure all shadow variables are updated.
     * @param scoreDirector never null, the {@link ScoreDirector} that needs to get notified of the changes.
     */
    void doMove(ScoreDirector scoreDirector);
    
Observer - present in:

    public static class SecondShadowUpdatingVariableListener extends VariableListenerAdapter<TestdataExtendedShadowedParentEntity> {

        @Override
        public void afterEntityAdded(ScoreDirector scoreDirector, TestdataExtendedShadowedParentEntity entity) {
            updateShadow(scoreDirector, entity);
        }
